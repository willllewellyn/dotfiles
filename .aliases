##########
# BREW
##########
alias b="brew"
alias bi="b install"            # e.g. bi git
alias bu="b update && b upgrade && b cleanup"
alias bc="b cleanup"
alias bl="b list"
alias bo="b outdated"
alias bs="b switch"             # e.g. bs git 2.5.0
alias bd="b doctor"
alias bansible="b unlink ansible &&
                b install https://raw.githubusercontent.com/Homebrew/homebrew-core/42151c7ab4dbef1bb90a0e28ee4077a413137de9/Formula/ansible.rb &&
                b extract ansible &&
                b switch ansible 2.8.5_1"

##########
# DOCKER
##########
alias d="docker"
alias dps="d ps"
alias dcs="d stop $(docker ps -a -q)"
alias dcrm="d rm $(docker ps -a -q)"
alias dclear="d container rm -f $(docker container ls -aq); docker volume rm  $(docker volume ls -q); docker system prune -f"

##########
# GEMS
##########
alias gm="gem"
alias gmb="gm build"           # e.g. gmb example.gemspec
alias gmi="gm install"         # e.g. gmi ./example-1.0.0.gem
alias gmu="gm update"
alias gmuu="gm update --system"
alias gmc="gm cleanup"

##########
# GIT
##########
alias g="git"
alias gs="g status"
alias ga="g add"
alias gm="g merge"
alias gpu="g push"
alias gpuff="g push --force-with-lease"
alias gpll="g pull"
alias gplll="g pull --all"
alias gco="g checkout"
alias gcb="g checkout -b"          # Create new branch e.g. gcob "Add user input"
alias gf="g fetch"
alias gcp="g cherry-pick"
alias gca="g cherry-pick --abort"
alias gcc="g cherry-pick --continue"
alias gc="g commit -v"
alias gca="gc --amend"
alias gd="g diff"                 # git diff branch_1..branch_2
alias gdd="gd --staged"
alias gst="g stash"
alias gsa="g stash apply"         # e.g. gsa stash@{0}
alias gsc="g stash clear"
alias gsd="g stash drop"          # e.g. gsd stash@{0}
alias gsl="g stash list"
alias gsp="g stash pop"           # e.g. gsp stash@{0}
alias gsts="g stash show -p"
alias gb="g branch"
alias gbr="g branch -r"
alias gbdel="g branch -d"         # e.g. gbdel feature/ADBM-123-remove-skynet
alias gl="g log"
alias gll="g log -p -2"
alias gr="g rebase"
alias grm="g rebase origin/master"
alias grc="g rebase --continue"
alias gra="g rebase --abort"
alias gri="g rebase -i HEAD~ "     # Interactively rebase commits e.g. gri 1
alias gcundo="g reset HEAD~"       # Undo last commit
alias gcredo="g reset 'HEAD@{1}'"  # Redo last uncommit
alias gundo="g reset --hard"        # Undo all changes
alias grestore="g checkout master --"
alias gcl="g clone"
alias gupdate="g merge"           # get updates from other branch gupdate feature/ADBM-123-Testing_flying-pigs
alias grh="g rebase HEAD --"      # git reset HEAD -- spec/routing/frontend/event_banner_spec.rb
alias gsub="g submodule update"
alias gt="g tag"
alias gput="gpu --tags"
alias gtd="gpu --delete origin"   # gtd 1.234.5
alias grr="g restore"             # grr Readme.md
alias grs="g reset"


##########
# PORTAL
##########
alias dt="dev/enter_test_environment.sh"
alias dr="dev/rebuild.sh"
alias ds="dev/compose -f 'dev/support/containerised-development/docker-compose-full-dependencies.yml' up -d portal && dev/server.sh"
alias dss="dev/compose -f 'dev/support/containerised-development/docker-compose-full-dependencies.yml' up -d portal"
alias dsh="dev/shell.sh"
alias dc="dev/compose"
alias dco="dev/compose run -w /opt/portal --rm -e PAGER=cat portal rails console"
alias dcs="dev/console.sh"
alias cstag="continuous_integration/build_and_deploy_to_staging.sh"
alias cfawn="continuous_integration/build_package.sh"
alias cfawnr="continuous_integration/build_rpm_package.sh"
alias cdoe="continuous_integration/deploy_most_recent_package_to_staging.sh"
alias cdoer="continuous_integration/deploy_most_recent_rpm_to_staging.sh "
alias rn="dev/compile_release_notes"
alias rmp='rm portal-0*'

##########
# NPM
##########
alias npp="npm run prettier:write"
alias npc="npm run compile"
alias npt="npm test"

##########
# ANSIBLE
##########
# portal1 -e portal_rpm_path=/Users/wllewellyn/projects/portal/portal.rpm
alias portal1="ansible-playbook --key-file=.keys/staging/ansible_rsa -i inventories/staging/hosts -l portal1 portal-servers.yml"
alias portal2="ansible-playbook --key-file=.keys/staging/ansible_rsa -i inventories/staging/hosts -l portal2 portal-servers.yml"
alias portal3="ansible-playbook --key-file=.keys/staging/ansible_rsa -i inventories/staging/hosts -l portal3 portal-servers.yml"
alias au="ansible-galaxy install -fr requirements.yml -p roles/"

##########
# VARIOUS
##########
alias a="atom"
alias c="code"
alias cd..="cd .."
alias cd....="cd ../.."
alias cd2="cd ../.."
alias cd3="cd ../../.."
alias cd../="cd ../"
alias h="history"
alias hg="history | grep"
alias rc="rubocop"
alias cc="clear && printf '\e[3J'"
alias sb="source ~/.bashrc"
alias sp="source ~/.bash_profile"
alias sz="source ~/.zshrc"
alias uz="upgrade_oh_my_zsh"
alias ab="a ~/.bashrc"
alias ls="ls -G"
alias ll="ls -lG"
alias finderShowHidden='defaults write com.apple.finder ShowAllFiles TRUE'
alias finderHideHidden='defaults write com.apple.finder ShowAllFiles FALSE'
alias xcodei="xcode-select --install"
alias ampd="sudo launchctl unload /Library/LaunchDaemons/com.cisco.amp.daemon.plist"
alias mt="make test"
alias ml="make lint"
alias ms="make shell"
alias rubocop="bundle exec rubocop"
alias rspec="bundle exec rspec"
alias afk="/System/Library/CoreServices/Menu\ Extras/User.menu/Contents/Resources/CGSession -suspend"
alias brew_update="brew -v update; brew upgrade --force-bottle --cleanup; brew cleanup; brew cask cleanup; brew prune; brew doctor; npm-check -g -u"
alias update_brew_npm_gem='brew_update; npm install npm -g; npm update -g; sudo gem update --system; sudo gem update --no-document'

##########
# DOTFILES
##########
alias df='/usr/bin/git --git-dir=$HOME/.dotfiles/ --work-tree=$HOME'
alias d="dotfiles"
alias dfa="d add"
alias dfc="d commit -m "
alias dfp="d push"
alias dfs="d status"
alias dotfiles='/usr/bin/git --git-dir=/Users/wllewellyn/.dotfiles/ --work-tree=/Users/wllewellyn'


zipf () { zip -r "$1".zip "$1" ; }          # zipf:         To create a ZIP archive of a folder
alias numFiles='echo $(ls -1 | wc -l)'      # numFiles:     Count of non-hidden files in current dir
alias make1mb='mkfile 1m ./1MB.dat'         # make1mb:      Creates a file of 1mb size (all zeros)
alias make5mb='mkfile 5m ./5MB.dat'         # make5mb:      Creates a file of 5mb size (all zeros)
alias make10mb='mkfile 10m ./10MB.dat'      # make10mb:     Creates a file of 10mb size (all zeros)

############
# NETWORKING
############
alias ip="dig +short myip.opendns.com @resolver1.opendns.com"
alias localip="ipconfig getifaddr en0"
alias ips="ifconfig -a | grep -o 'inet6\? \(addr:\)\?\s\?\(\(\([0-9]\+\.\)\{3\}[0-9]\+\)\|[a-fA-F0-9:]\+\)' | awk '{ sub(/inet6? (addr:)? ?/, \"\"); print }'"
alias flushDNS='dscacheutil -flushcache'            # flushDNS:     Flush out the DNS Cache
alias lsock='sudo /usr/sbin/lsof -i -P'             # lsock:        Display open sockets
alias lsockU='sudo /usr/sbin/lsof -nP | grep UDP'   # lsockU:       Display only open UDP sockets
alias lsockT='sudo /usr/sbin/lsof -nP | grep TCP'   # lsockT:       Display only open TCP sockets
alias ipInfo0='ipconfig getpacket en0'              # ipInfo0:      Get info on connections for en0
alias ipInfo1='ipconfig getpacket en1'              # ipInfo1:      Get info on connections for en1
alias openPorts='sudo lsof -i | grep LISTEN'        # openPorts:    All listening connections
alias showBlocked='sudo ipfw list'                  # showBlocked:  All ipfw rules inc/ blocked IPs

#   ii:  display useful host related informaton
#   -------------------------------------------------------------------
    ii() {
        echo -e "\nYou are logged on ${RED}$HOST"
        echo -e "\nAdditionnal information:$NC " ; uname -a
        echo -e "\n${RED}Users logged on:$NC " ; w -h
        echo -e "\n${RED}Current date :$NC " ; date
        echo -e "\n${RED}Machine stats :$NC " ; uptime
        echo -e "\n${RED}Current network location :$NC " ; scselect
        echo -e "\n${RED}Public facing IP Address :$NC " ;myip
        #echo -e "\n${RED}DNS Configuration:$NC " ; scutil --dns
        echo
    }

#   extract:  Extract most know archives with one command
#   ---------------------------------------------------------
extract () {
    if [ -f $1 ] ; then
      case $1 in
        *.tar.bz2)   tar xjf $1     ;;
        *.tar.gz)    tar xzf $1     ;;
        *.bz2)       bunzip2 $1     ;;
        *.rar)       unrar e $1     ;;
        *.gz)        gunzip $1      ;;
        *.tar)       tar xf $1      ;;
        *.tbz2)      tar xjf $1     ;;
        *.tgz)       tar xzf $1     ;;
        *.zip)       unzip $1       ;;
        *.Z)         uncompress $1  ;;
        *.7z)        7z x $1        ;;
        *)     echo "'$1' cannot be extracted via extract()" ;;
         esac
     else
         echo "'$1' is not a valid file"
     fi
}


# Add RVM to PATH for scripting. Make sure this is the last PATH variable change.
# export PATH="$PATH:$HOME/.rvm/bin"
# rbenv init
